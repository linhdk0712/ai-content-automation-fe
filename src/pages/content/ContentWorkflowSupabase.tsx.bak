import {
  Add,
  ArrowBack,
  ArrowForward,
  Cancel,
  CheckCircle,
  ExpandMore,
  MoreVert,
  Pause,
  Pending,
  Person,
  PlayArrow,
  Refresh,
  Schedule,
  Send,
  Stop,
  Warning
} from '@mui/icons-material';
import {
  Accordion,
  AccordionDetails,
  AccordionSummary,
  Alert,
  Avatar,
  Box,
  Button,
  Card,
  CardContent,
  Chip,
  CircularProgress,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  FormControl,
  Grid,
  IconButton,
  InputLabel,
  LinearProgress,
  List,
  ListItem,
  ListItemAvatar,
  ListItemIcon,
  ListItemText,
  MenuItem,
  Select,
  Step,
  StepContent,
  StepLabel,
  Stepper,
  TextField,
  Typography
} from '@mui/material';
import React, { useEffect, useState } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import {
  ContentTypeSelect,
  IndustrySelect,
  LanguageSelect,
  TargetAudienceSelect,
  ToneSelect
} from '../../components/common/ListOfValuesSelect';
import { useAuth } from '../../hooks/useAuth';
import { useWorkflow } from '../../hooks/useWorkflow';
import { triggerAiAvatarWorkflow } from '../../services/n8n.service';



interface ContentData {
  title: string;
  content: string;
  industry?: string;
  contentType?: string;
  language?: string;
  tone?: string;
  targetAudience?: string;
}

interface WorkflowProgress {
  id: string;
  status: 'QUEUED' | 'RUNNING' | 'COMPLETED' | 'FAILED' | 'CANCELLED';
  currentStep: string;
  progress: number;
  message: string;
  startedAt: string;
  finishedAt?: string;
  errorMessage?: string;
}


const ContentWorkflow: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const { user } = useAuth();
  const {
    workflows,
    currentWorkflow,
    loading,
    error,
    loadWorkflows,
    loadWorkflow,
    updateWorkflowStep,
    addComment,
    approveStep,
    rejectStep,
    completeWorkflow,
    cancelWorkflow
  } = useWorkflow();

  // Content input state
  const [contentData, setContentData] = useState<ContentData>({
    title: '',
    content: '',
    industry: '',
    contentType: '',
    language: 'vi',
    tone: '',
    targetAudience: ''
  });

  // Workflow execution state
  const [isTriggering, setIsTriggering] = useState(false);
  const [workflowProgress, setWorkflowProgress] = useState<WorkflowProgress | null>(null);

  // Dialog state
  const [commentDialogOpen, setCommentDialogOpen] = useState(false);
  const [selectedStepId, setSelectedStepId] = useState<number | null>(null);
  const [newComment, setNewComment] = useState('');
  const [filterStatus, setFilterStatus] = useState<string>('ALL');
  const [sortBy, setSortBy] = useState<string>('createdAt');


  // Load data on mount
  useEffect(() => {
    if (id) {
      loadWorkflow(parseInt(id));
    } else {
      loadWorkflows();
    }
  }, [id]);




  // Setup realtime subscription for database changes
  useEffect(() => {
    console.log('üîß useEffect triggered - isAuthenticated:', isAuthenticated, 'user:', user);
    
    if (!user?.id) {
      console.log('‚ùå No user ID available, skipping realtime setup');
      setConnectionStatus('DISCONNECTED');
      return;
    }

    console.log('üöÄ Setting up realtime for user:', user.id);
    setConnectionStatus('CONNECTING');
    
    try {
      // Subscribe to all database changes
      const channelName = supabaseService.realtimeService.subscribeToDatabaseChanges(handleRealtimeCallback);
      setRealtimeChannelName(channelName);
      
      // Listen for connection status updates
      supabaseService.realtimeService.updateSubscriptionStatus(channelName, (status: string) => {
        console.log('üì° Status callback received:', status);
        switch (status) {
          case 'SUBSCRIBED':
            setConnectionStatus('CONNECTED');
            break;
          case 'CHANNEL_ERROR':
          case 'TIMED_OUT':
            setConnectionStatus('ERROR');
            break;
          case 'CLOSED':
            setConnectionStatus('DISCONNECTED');
            break;
        }
      });

      console.log(`‚úÖ Realtime subscription started: ${channelName}`);
      console.log('üì° Active channels:', supabaseService.realtimeService.getActiveChannels());
      
      // Test connection
      setTimeout(() => {
        console.log('üîç Checking realtime connection status...');
        supabaseService.realtimeService.updateSubscriptionStatus(channelName, (status) => {
          console.log('üì° Connection status:', status);
          setConnectionStatus(status === 'SUBSCRIBED' ? 'CONNECTED' : 'ERROR');
        });
      }, 2000);
      
    } catch (error) {
      console.error('‚ùå Failed to setup realtime subscription:', error);
      setConnectionStatus('ERROR');
    }

    // Cleanup function
    return () => {
      if (realtimeChannelName) {
        supabaseService.realtimeService.unsubscribe(realtimeChannelName);
        console.log(`Realtime subscription ended: ${realtimeChannelName}`);
      } 
    };
  }, [user?.id]); // Thay ƒë·ªïi dependency t·ª´ isAuthenticated th√†nh user?.id

  // Cleanup on unmount
  useEffect(() => {
    return () => {
      if (realtimeChannelName) {
        supabaseService.realtimeService.unsubscribe(realtimeChannelName);
      }
    };
  }, [realtimeChannelName]);

  // Handle content input changes
  const handleContentChange = (field: keyof ContentData, value: string) => {
    setContentData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  // Handle sending content to n8n workflow
  const handleSendToWorkflow = async () => {
    if (!contentData.title.trim() || !contentData.content.trim()) {
      alert('Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ v√† n·ªôi dung');
      return;
    }

    setIsTriggering(true);
    setWorkflowProgress({
      id: `workflow_${Date.now()}`,
      status: 'QUEUED',
      currentStep: 'Initializing',
      progress: 0,
      message: 'ƒêang kh·ªüi t·∫°o workflow...',
      startedAt: new Date().toISOString()
    });

    try {
      const workflowData = {
        title: contentData.title,
        content: contentData.content,
        metadata: {
          industry: contentData.industry,
          contentType: contentData.contentType,
          language: contentData.language,
          tone: contentData.tone,
          targetAudience: contentData.targetAudience
        }
      };

      const run = await triggerAiAvatarWorkflow(0, workflowData);

      setWorkflowProgress(prev => prev ? {
        ...prev,
        status: 'RUNNING',
        currentStep: 'Processing Content',
        progress: 25,
        message: 'ƒêang x·ª≠ l√Ω n·ªôi dung v·ªõi AI...'
      } : null);

      console.log('Workflow triggered successfully:', run);
    } catch (error) {
      console.error('Failed to trigger workflow:', error);
      setWorkflowProgress(prev => prev ? {
        ...prev,
        status: 'FAILED',
        progress: 0,
        message: 'L·ªói khi kh·ªüi ch·∫°y workflow',
        errorMessage: error instanceof Error ? error.message : 'Unknown error',
        finishedAt: new Date().toISOString()
      } : null);
    } finally {
      setIsTriggering(false);
    }
  };

  const handleStepAction = async (stepId: number, action: 'approve' | 'reject' | 'complete', comment?: string) => {
    try {
      switch (action) {
        case 'approve':
          await approveStep(stepId, comment);
          break;
        case 'reject':
          await rejectStep(stepId, comment);
          break;
        case 'complete':
          await updateWorkflowStep(stepId, { status: 'completed', comments: [{ id: 0, content: comment || '', author: { id: 0, name: '' }, createdAt: '' }] });
          break;
      }

      // Reload workflow data
      if (id) {
        loadWorkflow(parseInt(id));
      }
    } catch (error) {
      console.error('Failed to update step:', error);
    }
  };


  const handleAddComment = async () => {
    if (selectedStepId && newComment.trim()) {
      try {
        await addComment(selectedStepId, newComment.trim());

        setCommentDialogOpen(false);
        setSelectedStepId(null);
        setNewComment('');

        if (id) {
          loadWorkflow(parseInt(id));
        }
      } catch (error) {
        console.error('Failed to add comment:', error);
      }
    }
  };

  // Test function to insert into realtime_events table
  const testRealtimeEvent = async () => {
    try {
      console.log('üß™ Testing realtime event insertion...');
      
      // Create a test Supabase client instance
      const testSupabase = createClient(
        'https://jhhljaryqsmfiabnqqxp.supabase.co',
        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpoaGxqYXJ5cXNtZmlhYm5xcXhwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg4NDg3NTIsImV4cCI6MjA3NDQyNDc1Mn0.8mIdeDwpKmND6j_bRSwwzbMO06ewkWnDexrZyc-ttdY'
      );

      const testData = {
        event_type: 'test_event',
        user_id: user?.id || 'anonymous',
        data: { message: 'Test from ContentWorkflow', timestamp: new Date().toISOString() },
        created_at: new Date().toISOString()
      };

      const { data, error } = await testSupabase
        .from('realtime_events')
        .insert(testData)
        .select();

      if (error) {
        console.error('‚ùå Failed to insert test event:', error);
      } else {
        console.log('‚úÖ Test event inserted successfully:', data);
        addRealtimeNotification({
          id: 'test-event-' + Date.now(),
          type: 'info',
          title: 'Test Event Sent',
          message: 'Sent test event to realtime_events table',
          timestamp: new Date(),
          tableName: 'realtime_events',
          action: 'INSERT'
        });
      }
    } catch (error) {
      console.error('‚ùå Error in test realtime event:', error);
    }
  };

  // Debug function to check realtime connection status
  const debugRealtimeConnection = () => {
    console.log('üîç === REALTIME DEBUG INFO ===');
    console.log('üîç User authenticated:', isAuthenticated);
    console.log('üîç User ID:', user?.id);
    console.log('üîç Connection status:', connectionStatus);
    console.log('üîç Realtime channel:', realtimeChannelName);
    console.log('üîç Active channels:', supabaseService.realtimeService.getActiveChannels());
    console.log('üîç =========================');
  };

  // Force refresh auth session
  const refreshAuthSession = () => {
    console.log('üîÑ Refreshing auth session...');
    const testSupabase = createClient(
      'https://jhhljaryqsmfiabnqqxp.supabase.co',
      'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpoaGxqYXJ5cXNtZmlhYm5xcXhwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg4NDg3NTIsImV4cCI6MjA3NDQyNDc1Mn0.8mIdeDwpKmND6j_bRSwwzbMO06ewkWnDexrZyc-ttdY'
    );
    testSupabase.auth.refreshSession();
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'success';
      case 'in_progress': return 'primary';
      case 'pending': return 'warning';
      case 'rejected': return 'error';
      case 'skipped': return 'default';
      default: return 'default';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'completed': return <CheckCircle color="success" />;
      case 'in_progress': return <PlayArrow color="primary" />;
      case 'pending': return <Pending color="warning" />;
      case 'rejected': return <Cancel color="error" />;
      case 'skipped': return <ArrowForward color="disabled" />;
      default: return <Pending />;
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'urgent': return 'error';
      case 'high': return 'warning';
      case 'medium': return 'info';
      case 'low': return 'success';
      default: return 'default';
    }
  };

  // Render content input form
  const renderContentForm = () => (
    <Card sx={{
      mb: 3,
      boxShadow: '0 4px 20px rgba(0,0,0,0.1)',
      border: '1px solid',
      borderColor: 'divider',
      borderRadius: 3,
      overflow: 'hidden'
    }}>
      <Box sx={{
        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
        color: 'white',
        p: 3,
        mb: 0
      }}>
        <Typography variant="h6" sx={{
          fontWeight: 600,
          mb: 0.5
        }}>
          Nh·∫≠p th√¥ng tin n·ªôi dung
        </Typography>
      </Box>
      <CardContent sx={{ p: 3, pt: 3 }}>
        <Grid container spacing={3}>
          <Grid item xs={12}>
            <TextField
              fullWidth
              label="Ti√™u ƒë·ªÅ *"
              value={contentData.title}
              onChange={(e) => handleContentChange('title', e.target.value)}
              placeholder="Nh·∫≠p ti√™u ƒë·ªÅ cho n·ªôi dung..."
              sx={{
                '& .MuiOutlinedInput-root': {
                  borderRadius: 2
                }
              }}
            />
          </Grid>

          <Grid item xs={12}>
            <TextField
              fullWidth
              multiline
              rows={6}
              label="N·ªôi dung *"
              value={contentData.content}
              onChange={(e) => handleContentChange('content', e.target.value)}
              placeholder="Nh·∫≠p n·ªôi dung c·∫ßn x·ª≠ l√Ω..."
              sx={{
                '& .MuiOutlinedInput-root': {
                  borderRadius: 2
                }
              }}
            />
          </Grid>

          {/* Content Settings Section */}
          <Grid item xs={12}>
            <Typography variant="body2" sx={{ mb: 2, fontWeight: 600, color: 'text.primary', fontSize: '0.875rem' }}>
              C√†i ƒë·∫∑t n·ªôi dung
            </Typography>
          </Grid>

          <Grid item xs={12} sm={6}>
            <IndustrySelect
              value={contentData.industry}
              onChange={(value) => handleContentChange('industry', value as string)}
              placeholder="Ch·ªçn ng√†nh ngh·ªÅ"
              showIcons={true}
            />
          </Grid>

          <Grid item xs={12} sm={6}>
            <ContentTypeSelect
              value={contentData.contentType}
              onChange={(value) => handleContentChange('contentType', value as string)}
              placeholder="Ch·ªçn lo·∫°i n·ªôi dung"
              showIcons={true}
            />
          </Grid>

          {/* Style & Audience Section */}
          <Grid item xs={12}>
            <Typography variant="body2" sx={{ mb: 2, fontWeight: 600, color: 'text.primary', fontSize: '0.875rem' }}>
              Phong c√°ch & ƒê·ªëi t∆∞·ª£ng
            </Typography>
          </Grid>

          <Grid item xs={12} sm={4}>
            <LanguageSelect
              value={contentData.language}
              onChange={(value) => handleContentChange('language', value as string)}
              showIcons={true}
            />
          </Grid>

          <Grid item xs={12} sm={4}>
            <ToneSelect
              value={contentData.tone}
              onChange={(value) => handleContentChange('tone', value as string)}
              placeholder="Ch·ªçn tone/phong c√°ch"
              showIcons={true}
            />
          </Grid>

          <Grid item xs={12} sm={4}>
            <TargetAudienceSelect
              value={contentData.targetAudience}
              onChange={(value) => handleContentChange('targetAudience', value as string)}
              placeholder="Ch·ªçn ƒë·ªëi t∆∞·ª£ng m·ª•c ti√™u"
              showIcons={true}
            />
          </Grid>
        </Grid>

        <Box sx={{
          borderTop: '1px solid',
          borderColor: 'divider',
          pt: 3,
          mt: 3
        }}>
          <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>
            <Button
              variant="contained"
              size="large"
              startIcon={isTriggering ? <CircularProgress size={20} /> : <Send />}
              onClick={handleSendToWorkflow}
              disabled={isTriggering || !contentData.title.trim() || !contentData.content.trim()}
              sx={{
                minWidth: 200,
                py: 1.5,
                borderRadius: 2,
                fontSize: '1rem',
                fontWeight: 600,
                background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                boxShadow: '0 4px 20px rgba(102, 126, 234, 0.4)',
                '&:hover': {
                  background: 'linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%)',
                  boxShadow: '0 6px 24px rgba(102, 126, 234, 0.5)',
                  transform: 'translateY(-1px)',
                },
                '&:disabled': {
                  background: 'linear-gradient(135deg, #ccc 0%, #999 100%)',
                  boxShadow: 'none',
                },
                transition: 'all 0.2s ease-in-out'
              }}
            >
              {isTriggering ? 'ƒêang g·ª≠i...' : 'G·ª≠i ƒë·∫øn Workflow'}
            </Button>

            <Button
              variant="outlined"
              size="large"
              onClick={() => {
                setContentData({
                  title: '',
                  content: '',
                  industry: '',
                  contentType: '',
                  language: 'vi',
                  tone: '',
                  targetAudience: ''
                });
                setWorkflowProgress(null);
              }}
              sx={{
                py: 1.5,
                borderRadius: 2,
                fontSize: '1rem',
                fontWeight: 500
              }}
            >
              X√≥a form
            </Button>
          </Box>
        </Box>
      </CardContent>
    </Card>
  );

  // Render workflow progress
  const renderWorkflowProgress = () => {
    if (!workflowProgress) return null;

    const getStatusColor = (status: string) => {
      switch (status) {
        case 'COMPLETED': return 'success';
        case 'RUNNING': return 'primary';
        case 'QUEUED': return 'warning';
        case 'FAILED': return 'error';
        case 'CANCELLED': return 'default';
        default: return 'default';
      }
    };

    const getStatusIcon = (status: string) => {
      switch (status) {
        case 'COMPLETED': return <CheckCircle color="success" />;
        case 'RUNNING': return <CircularProgress size={20} />;
        case 'QUEUED': return <Pending color="warning" />;
        case 'FAILED': return <Cancel color="error" />;
        case 'CANCELLED': return <Stop color="disabled" />;
        default: return <Pending />;
      }
    };

    return (
      <Card sx={{ mb: 3 }}>
        <CardContent>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>
            {getStatusIcon(workflowProgress.status)}
            <Typography variant="h6">
              Ti·∫øn tr√¨nh Workflow
            </Typography>
            <Chip
              label={workflowProgress.status}
              color={getStatusColor(workflowProgress.status) as any}
              size="small"
            />
          </Box>

          <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
            B∆∞·ªõc hi·ªán t·∫°i: {workflowProgress.currentStep}
          </Typography>

          <LinearProgress
            variant="determinate"
            value={workflowProgress.progress}
            sx={{ mb: 2, height: 8, borderRadius: 4 }}
          />

          <Typography variant="body2" sx={{ mb: 1 }}>
            {workflowProgress.message}
          </Typography>

          <Typography variant="caption" color="text.secondary">
            B·∫Øt ƒë·∫ßu: {new Date(workflowProgress.startedAt).toLocaleString('vi-VN')}
          </Typography>

          {workflowProgress.finishedAt && (
            <Typography variant="caption" color="text.secondary" sx={{ ml: 2 }}>
              K·∫øt th√∫c: {new Date(workflowProgress.finishedAt).toLocaleString('vi-VN')}
            </Typography>
          )}

          {workflowProgress.errorMessage && (
            <Alert severity="error" sx={{ mt: 2 }}>
              {workflowProgress.errorMessage}
            </Alert>
          )}
        </CardContent>
      </Card>
    );
  };

  const renderWorkflowList = () => (
    <Box>
      {/* Header */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
        <Typography variant="h4">Content Workflows</Typography>
        <Button
          variant="contained"
          startIcon={<Add />}
          onClick={() => navigate('/content/workflows/create')}
        >
          Create Workflow
        </Button>
      </Box>

      {/* Filters */}
      <Card sx={{ mb: 3, p: 2 }}>
        <Grid container spacing={2} alignItems="center">
          <Grid item xs={12} sm={3}>
            <FormControl fullWidth size="small">
              <InputLabel>Status</InputLabel>
              <Select
                value={filterStatus}
                onChange={(e) => setFilterStatus(e.target.value)}
                label="Status"
              >
                <MenuItem value="ALL">All Status</MenuItem>
                <MenuItem value="draft">Draft</MenuItem>
                <MenuItem value="active">Active</MenuItem>
                <MenuItem value="completed">Completed</MenuItem>
                <MenuItem value="cancelled">Cancelled</MenuItem>
              </Select>
            </FormControl>
          </Grid>


          <Grid item xs={12} sm={3}>
            <FormControl fullWidth size="small">
              <InputLabel>Sort By</InputLabel>
              <Select
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
                label="Sort By"
              >
                <MenuItem value="createdAt">Created Date</MenuItem>
                <MenuItem value="priority">Priority</MenuItem>
                <MenuItem value="dueDate">Due Date</MenuItem>
                <MenuItem value="status">Status</MenuItem>
              </Select>
            </FormControl>
          </Grid>

          <Grid item xs={12} sm={3}>
            <Button
              variant="outlined"
              startIcon={<Refresh />}
              onClick={() => loadWorkflows()}
              fullWidth
            >
              Refresh
            </Button>
          </Grid>
        </Grid>
      </Card>

      {/* Workflows Grid */}
      <Grid container spacing={3}>
        {workflows.map((workflow) => (
          <Grid item xs={12} md={6} lg={4} key={workflow.id}>
            <Card
              sx={{
                cursor: 'pointer',
                '&:hover': { boxShadow: 4 }
              }}
              onClick={() => navigate(`/content/workflow/${workflow.id}`)}
            >
              <CardContent>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
                  <Typography variant="h6" noWrap>
                    {workflow.workflowTemplate.name}
                  </Typography>
                  <IconButton size="small">
                    <MoreVert />
                  </IconButton>
                </Box>

                <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>
                  <Chip
                    label={workflow.status}
                    color={getStatusColor(workflow.status) as any}
                    size="small"
                  />
                  <Chip
                    label={workflow.priority}
                    color={getPriorityColor(workflow.priority) as any}
                    size="small"
                  />
                </Box>

                <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                  {workflow.workflowTemplate.description}
                </Typography>

                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>
                  <Avatar
                    src={workflow.createdBy.avatar}
                    sx={{ width: 24, height: 24 }}
                  >
                    {workflow.createdBy.name.charAt(0)}
                  </Avatar>
                  <Typography variant="caption" color="text.secondary">
                    Created by {workflow.createdBy.name}
                  </Typography>
                </Box>

                <LinearProgress
                  variant="determinate"
                  value={(workflow.currentStep / workflow.steps.length) * 100}
                  sx={{ mb: 1 }}
                />
                <Typography variant="caption" color="text.secondary">
                  Step {workflow.currentStep} of {workflow.steps.length}
                </Typography>

                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mt: 2 }}>
                  <Typography variant="caption" color="text.secondary">
                    {new Date(workflow.createdAt).toLocaleDateString()}
                  </Typography>
                  <Button size="small">
                    View Details
                  </Button>
                </Box>
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>
    </Box>
  );

  const renderWorkflowDetails = () => {
    if (!currentWorkflow) return null;

    return (
      <Box>
        {/* Header */}
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
          <Box>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
              <IconButton onClick={() => navigate('/content/workflows')}>
                <ArrowBack />
              </IconButton>
              <Typography variant="h4">
                {currentWorkflow.workflowTemplate.name}
              </Typography>
            </Box>
            <Box sx={{ display: 'flex', gap: 1 }}>
              <Chip
                label={currentWorkflow.status}
                color={getStatusColor(currentWorkflow.status) as any}
              />
              <Chip
                label={currentWorkflow.priority}
                color={getPriorityColor(currentWorkflow.priority) as any}
              />
            </Box>
          </Box>

          <Box sx={{ display: 'flex', gap: 1 }}>
            {currentWorkflow.status === 'active' && (
              <>
                <Button
                  variant="outlined"
                  startIcon={<Pause />}
                  onClick={() => {/* Handle pause */ }}
                >
                  Pause
                </Button>
                <Button
                  variant="outlined"
                  color="error"
                  startIcon={<Stop />}
                  onClick={() => cancelWorkflow(currentWorkflow.id)}
                >
                  Cancel
                </Button>
              </>
            )}
            <Button
              variant="contained"
              startIcon={<CheckCircle />}
              onClick={() => completeWorkflow(currentWorkflow.id)}
              disabled={currentWorkflow.status !== 'active'}
            >
              Complete
            </Button>
          </Box>
        </Box>

        {/* Workflow Info */}
        <Grid container spacing={3} sx={{ mb: 3 }}>
          <Grid item xs={12} md={8}>
            <Card>
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  Workflow Progress
                </Typography>

                <Stepper activeStep={currentWorkflow.currentStep - 1} orientation="vertical">
                  {currentWorkflow.steps.map((step) => (
                    <Step key={step.id}>
                      <StepLabel
                        StepIconComponent={() => getStatusIcon(step.status)}
                        optional={
                          step.assignee && (
                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5, mt: 0.5 }}>
                              <Avatar
                                src={step.assignee.avatar}
                                sx={{ width: 16, height: 16 }}
                              >
                                {step.assignee.name.charAt(0)}
                              </Avatar>
                              <Typography variant="caption">
                                {step.assignee.name}
                              </Typography>
                            </Box>
                          )
                        }
                      >
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                          <Typography variant="subtitle1">
                            {step.name}
                          </Typography>
                          <Chip
                            label={step.status}
                            color={getStatusColor(step.status) as any}
                            size="small"
                          />
                        </Box>
                      </StepLabel>

                      <StepContent>
                        <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                          {step.description}
                        </Typography>

                        {step.requirements && step.requirements.length > 0 && (
                          <Box sx={{ mb: 2 }}>
                            <Typography variant="subtitle2" gutterBottom>
                              Requirements:
                            </Typography>
                            <List dense>
                              {step.requirements.map((req, reqIndex) => (
                                <ListItem key={`req-${reqIndex}-${req.substring(0, 10)}`}>
                                  <ListItemText primary={req} />
                                </ListItem>
                              ))}
                            </List>
                          </Box>
                        )}

                        {step.dueDate && (
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>
                            <Schedule fontSize="small" color="warning" />
                            <Typography variant="body2" color="text.secondary">
                              Due: {new Date(step.dueDate).toLocaleDateString()}
                            </Typography>
                          </Box>
                        )}

                        {step.status === 'pending' && step.assignee?.id === user?.id && (
                          <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>
                            <Button
                              size="small"
                              variant="contained"
                              color="success"
                              onClick={() => handleStepAction(step.id, 'approve')}
                            >
                              Approve
                            </Button>
                            <Button
                              size="small"
                              variant="outlined"
                              color="error"
                              onClick={() => handleStepAction(step.id, 'reject')}
                            >
                              Reject
                            </Button>
                            <Button
                              size="small"
                              variant="outlined"
                              onClick={() => {
                                setSelectedStepId(step.id);
                                setCommentDialogOpen(true);
                              }}
                            >
                              Add Comment
                            </Button>
                          </Box>
                        )}

                        {!step.assignee && currentWorkflow.status === 'active' && (
                          <Button
                            size="small"
                            variant="outlined"
                            startIcon={<Person />}
                            onClick={() => {
                              console.log('Assign step functionality not implemented yet');
                            }}
                          >
                            Assign
                          </Button>
                        )}

                        {step.comments.length > 0 && (
                          <Accordion sx={{ mt: 2 }}>
                            <AccordionSummary expandIcon={<ExpandMore />}>
                              <Typography variant="subtitle2">
                                Comments ({step.comments.length})
                              </Typography>
                            </AccordionSummary>
                            <AccordionDetails>
                              <List>
                                {step.comments.map((comment) => (
                                  <ListItem key={comment.id} divider>
                                    <ListItemAvatar>
                                      <Avatar src={comment.author.avatar}>
                                        {comment.author.name.charAt(0)}
                                      </Avatar>
                                    </ListItemAvatar>
                                    <ListItemText
                                      primary={comment.content}
                                      secondary={
                                        <Box>
                                          <Typography variant="caption">
                                            {comment.author.name}
                                          </Typography>
                                          <Typography variant="caption" sx={{ ml: 1 }}>
                                            {new Date(comment.createdAt).toLocaleString()}
                                          </Typography>
                                        </Box>
                                      }
                                    />
                                  </ListItem>
                                ))}
                              </List>
                            </AccordionDetails>
                          </Accordion>
                        )}
                      </StepContent>
                    </Step>
                  ))}
                </Stepper>
              </CardContent>
            </Card>
          </Grid>

          <Grid item xs={12} md={4}>
            {/* Workflow Metadata */}
            <Card sx={{ mb: 2 }}>
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  Workflow Details
                </Typography>

                <List dense>
                  <ListItem>
                    <ListItemText
                      primary="Created By"
                      secondary={
                        <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>
                          <Avatar
                            src={currentWorkflow.createdBy.avatar}
                            sx={{ width: 20, height: 20 }}
                          >
                            {currentWorkflow.createdBy.name.charAt(0)}
                          </Avatar>
                          {currentWorkflow.createdBy.name}
                        </Box>
                      }
                    />
                  </ListItem>

                  <ListItem>
                    <ListItemText
                      primary="Created"
                      secondary={new Date(currentWorkflow.createdAt).toLocaleString()}
                    />
                  </ListItem>

                  {currentWorkflow.startedAt && (
                    <ListItem>
                      <ListItemText
                        primary="Started"
                        secondary={new Date(currentWorkflow.startedAt).toLocaleString()}
                      />
                    </ListItem>
                  )}

                  {currentWorkflow.completedAt && (
                    <ListItem>
                      <ListItemText
                        primary="Completed"
                        secondary={new Date(currentWorkflow.completedAt).toLocaleString()}
                      />
                    </ListItem>
                  )}

                  {currentWorkflow.metadata?.estimatedDuration && (
                    <ListItem>
                      <ListItemText
                        primary="Estimated Duration"
                        secondary={`${currentWorkflow.metadata.estimatedDuration} hours`}
                      />
                    </ListItem>
                  )}

                  {currentWorkflow.metadata?.department && (
                    <ListItem>
                      <ListItemText
                        primary="Department"
                        secondary={currentWorkflow.metadata.department}
                      />
                    </ListItem>
                  )}
                </List>
              </CardContent>
            </Card>

            {/* Tags */}
            {currentWorkflow.tags.length > 0 && (
              <Card>
                <CardContent>
                  <Typography variant="h6" gutterBottom>
                    Tags
                  </Typography>
                  <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
                    {currentWorkflow.tags.map((tag) => (
                      <Chip key={tag} label={tag} size="small" variant="outlined" />
                    ))}
                  </Box>
                </CardContent>
              </Card>
            )}
          </Grid>
        </Grid>
      </Box>
    );
  };

  if (loading) {
    return (
      <Box sx={{ p: 3 }}>
        <LinearProgress />
        <Typography sx={{ mt: 2 }}>Loading workflow data...</Typography>
      </Box>
    );
  }

  if (error) {
    return (
      <Box sx={{ p: 3 }}>
        <Alert severity="error" sx={{ mb: 2 }}>
          {error}
        </Alert>
        <Button onClick={() => navigate('/content')}>
          Back to Content
        </Button>
      </Box>
    );
  }

  return (
    <Box sx={{ p: 3 }}>
      {/* Page Header */}
      <Box sx={{ mb: 4 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
          <Typography variant="h4" gutterBottom sx={{ mb: 0 }}>
            Content Workflow
          </Typography>
          
          {/* Realtime Status */}
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
            {/* Connection Status */}
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <Box
                sx={{
                  width: 8,
                  height: 8,
                  borderRadius: '50%',
                  backgroundColor: (() => {
                    switch (connectionStatus) {
                      case 'CONNECTED': return 'success.main';
                      case 'CONNECTING': return 'warning.main';
                      case 'ERROR': return 'error.main';
                      default: return 'grey.400';
                    }
                  })()
                }}
              />
              <Typography variant="body2" color="text.secondary">
                {(() => {
                  switch (connectionStatus) {
                    case 'CONNECTED': return 'Realtime Connected';
                    case 'CONNECTING': return 'Connecting...';
                    case 'ERROR': return 'Connection Error';
                    default: return 'Disconnected';
                  }
                })()}
              </Typography>
            </Box>

            {/* Notifications Badge */}
            {realtimeNotifications.length > 0 && (
              <Chip
                icon={<NotificationsActive />}
                label={`${realtimeNotifications.length} notifications`}
                size="small"
                color="primary"
                variant="outlined"
                onClick={() => setNotificationSnackbarOpen(true)}
                sx={{ cursor: 'pointer' }}
              />
            )}

            {/* Channel ID for debugging */}
            {realtimeChannelName && (
              <Typography variant="caption" color="text.secondary" sx={{ fontFamily: 'monospace' }}>
                Channel: {realtimeChannelName.substring(realtimeChannelName.length - 8)}
              </Typography>
            )}

            {/* Debug Button */}
            <Button
              variant="outlined"
              size="small"
              onClick={debugRealtimeConnection}
              sx={{ ml: 1 }}
            >
              üîç Debug
            </Button>

            {/* Refresh Auth Button */}
            <Button
              variant="outlined"
              size="small"
              onClick={refreshAuthSession}
              sx={{ ml: 1 }}
            >
              üîÑ Refresh Auth
            </Button>

            {/* Test Realtime Button */}
            <Button
              variant="outlined"
              size="small"
              onClick={testRealtimeEvent}
              sx={{ ml: 1 }}
            >
              üß™ Test Realtime
            </Button>
          </Box>
        </Box>

        <Typography variant="body1" color="text.secondary">
          Nh·∫≠p n·ªôi dung v√† g·ª≠i ƒë·∫øn workflow ƒë·ªÉ x·ª≠ l√Ω t·ª± ƒë·ªông
        </Typography>
      </Box>

      {/* Content Input Form */}
      {renderContentForm()}

      {/* Workflow Progress */}
      {renderWorkflowProgress()}

      {/* Existing Workflow Management */}
      {id ? renderWorkflowDetails() : renderWorkflowList()}


      {/* Add Comment Dialog */}
      <Dialog open={commentDialogOpen} onClose={() => setCommentDialogOpen(false)}>
        <DialogTitle>Add Comment</DialogTitle>
        <DialogContent>
          <TextField
            fullWidth
            multiline
            rows={4}
            placeholder="Enter your comment..."
            value={newComment}
            onChange={(e) => setNewComment(e.target.value)}
            sx={{ mt: 2 }}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setCommentDialogOpen(false)}>Cancel</Button>
          <Button onClick={handleAddComment} variant="contained">
            Add Comment
          </Button>
        </DialogActions>
      </Dialog>

      {/* Realtime Notification Snackbar */}
      <Snackbar
        open={notificationSnackbarOpen && !!lastNotification}
        autoHideDuration={6000}
        onClose={() => setNotificationSnackbarOpen(false)}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
      >
        <Alert
          onClose={() => setNotificationSnackbarOpen(false)}
          severity={lastNotification?.type || 'info'}
          sx={{ width: '100%' }}
        >
          <Typography variant="subtitle2" gutterBottom>
            {lastNotification?.title || 'Notification'}
          </Typography>
          <Typography variant="body2">
            {lastNotification?.message || ''}
          </Typography>
          <Typography variant="caption" display="block">
            Table: {lastNotification?.tableName} ‚Ä¢ {lastNotification?.timestamp.toLocaleTimeString()}
          </Typography>
        </Alert>
      </Snackbar>

      {/* Realtime Notifications Dialog */}
      <Dialog 
        open={notificationSnackbarOpen && realtimeNotifications.length > 0}
        onClose={() => setNotificationSnackbarOpen(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            <NotificationsActive />
            <Typography variant="h6">
              Realtime Notifications ({realtimeNotifications.length})
            </Typography>
          </Box>
        </DialogTitle>
        <DialogContent>
          {realtimeNotifications.length === 0 ? (
            <Typography color="text.secondary" sx={{ textAlign: 'center', py: 4 }}>
              No notifications yet
            </Typography>
          ) : (
            <List sx={{ maxHeight: 400, overflow: 'auto' }}>
              {realtimeNotifications.map((notification, index) => (
                <ListItem key={notification.id} divider={index < realtimeNotifications.length - 1}>
                  <ListItemIcon>
                    {notification.type === 'success' && <CheckCircle color="success" />}
                    {notification.type === 'info' && <PlayArrow color="info" />}
                    {notification.type === 'warning' && <Warning color="warning" />}
                    {notification.type === 'error' && <Cancel color="error" />}
                  </ListItemIcon>
                  <ListItemText
                    primary={
                      <Box>
                        <Typography variant="subtitle2">
                          {notification.title}
                        </Typography>
                        <Typography variant="body2" color="text.secondary">
                          {notification.message}
                        </Typography>
                      </Box>
                    }
                    secondary={
                      <Box sx={{ pt: 0.5 }}>
                        <Typography variant="caption" color="text.secondary">
                          {notification.timestamp.toLocaleString()}
                        </Typography>
                        {notification.tableName && (
                          <Typography variant="caption" color="text.secondary" sx={{ ml: 1 }}>
                            ‚Ä¢ {notification.tableName}
                          </Typography>
                        )}
                      </Box>
                    }
                  />
                </ListItem>
              ))}
            </List>
          )}
        </DialogContent>
        <DialogActions>
          <Button 
            onClick={() => {
              setRealtimeNotifications([]);
              setNotificationSnackbarOpen(false);
            }}
            color="error"
          >
            Clear All
          </Button>
          <Button onClick={() => setNotificationSnackbarOpen(false)}>
            Close
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default ContentWorkflow;